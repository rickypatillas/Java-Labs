
Answer the following questions


1) What is an instance variable?
    - a variable that describes the class itself
    -a variable that is declared at the class level before any method
    -ex. String color;


2) How do you create a new object?
    -className variableName = new className ();
    -Car rickyCar = new Car();

3) After creating a new object, how do you set that objects instance variables?
    -two ways:
        1. Object name.variablename = value
        ex. rickyCar.color = "blue";
        2. Use setter method
          ex.  rickyCar.setColor("blue");

4) What is a reference variable? Why do you need to be careful with reference variables?
    -when you pass a reference variable is an object. When you pass an object to another method (methodB) as an argument,
     methodB does not get its own copy of the object, it gets a reference to the object. In this case the object in
     both methodA and method B are pointing to the same exact place/object in memory. ANy change that happens
     to teh obect (reference variable) in methodB will carry over to the object in methodA regardless of whether or
     not methodB returns that object to methodA.

5) How many methods can you have in a class? - many

6) How do you exit a method at any point?
    -if it's a void method use "return";
    -if the method has a non-void return type use "return <variable of returnTypes>"
        ie- return a*b;

7) What is the method signature required to return an "int" from a method?
    -public int someMethod(<optional args>) {....}
        -this method takes two arguments as parameter and return an int which is the result of multiplying the
        two parameters.

       int x = objectName.multiply(2.3);

8) Assuming "int num = 10", what is the syntax to return "num" from a method?\
    -"return num;"

9) How do you pass a parameter to a method?
    -you pass parameters to method (that requiere parameters) in the parenthesis
    -ex. int x = objectname.mulitply(10.20);
        -"10" and "20" in the line above are parameters being passed to the multiply method (which
        requires two parameters)

10) What is the method signature for a method named sum() that takes two int parameters
    and returns their sum as in int?
    -   public int sum(int a, int b) {}
        int x = sum(8, 9);

11) What is a constructor?
    -a constructor is invoked/used when teh "new" keyboard is used
    -constructor create objects
    -if yuo do not define a custom constructor, Java will provide a default (blank) constructor for you.

12) How does Java treat a class without a constructor?
    -class Painting{
        Painting() {} // <- default constructor - java created this behind the scenes if you do not create one.
        -only way to call a constructor is with the "new" keyword.

13) What would the constructor for "public class Animal" look like?
    -public Animal()  {}

14) What is the effect of passing parameters to a constructor?
    -class Car {
        String color;
        String model;

        Car(String color, String model) {
            this.color = color;
            this.model = model;
            }
          }
        //some other class
        Car myCar = new Car("Yellow", "Mustang");

        //without paremetirzed constructor you would have to:
        Car myCar = new Car();
        myCar.color = "Yellow";
        myCar.model = "Mustang";

15) When should you pass parameters to a constructor?
    -if the constructor requires parameters
    - if you're writing the constructor and you want to be able to set the instance variables in the constructor or set
    other variable or do some other task as soon as the object is created
    -Car myCar = new Car("Yellow", "Mustang");

16) What does the finalize() method do?
    -the finalized method is called immediately before an object is destroyed.
    -useful for closing connections to open files,network connections, databases, etc.

17) What does the "this" keyword do?
    - class Car {
              String color; // <- this.color
              String model; // <- this.model

              Car(String color, String model) {
                  this.color = color;
                  this.model = model;
                  }
                }

18) When should you use the "this" keyword?
    - you should use the this.keyword (usually in the constructor when you have a naming conflict between the
     instance variable (ex. color) and the constructor parameter (ie. color).
    class Car {
                  String color; // <- this.color
                  String model; // <- this.model

                  Car(String color, String model) {
                      this.color = color;
                      this.model = model;
                      }
                    }

19) Write an example of the "this" keyword in action.
---mira pa' arriba culeado.

20) Explain the diff between static and non-static variables
    -a static variable is shared by all instance of a class - for instance "numCarsCreated"-  if that is a static
    variable - each and every object created from Car class has shared access to that variable - if that variable
    currently holds "4" - each and every object created from the Car class can tell you that the variable currently
     holds "4". Static variables are shared across all instance of a class - n0 matter how many objects/instances you
     create of that class.
    -non-static is something that belongs just to you (birthday, address, sex partners). A non-static variable belongs
     to teh instance/object -  for instance, birthday is a great example of a non-static variable - because each
     instance/object of the Person class should have their own copy of that variable that they can modify and change
      accordingly based on their own individual birthday Phone number, Po Box, street address, - these are all
       non-static variables that should not be shared across every instance/object of the person class that has been
       created.

21) Explain the difference static and non-static methods.
    -non-static method can only be access from another class by creating an object of the class contains the
     non-static method adn usign that obje to call the non-static. Instance, assume the Car class has a non-static
     method called accelerate();
    ex.
     Car myNewCar - new Car();
     myNewCar.accelerate(); ?? ,_ using the object "myNewCar" to invoke method "accelerate"
     bejctName.methodName();
    - a static method is required when upi need to calla  method inside a class before an object of that class ahs been
     or can be created. For instance  the main () method. The JVM does not create a new object of your class to all
      teh main() method. It simply calls it using "ClassName.main();"